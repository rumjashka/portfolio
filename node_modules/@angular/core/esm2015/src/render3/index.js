/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { LifecycleHooksFeature, getHostElement, getRenderedText, renderComponent, whenRendered } from './component';
import { defineBase, defineComponent, defineDirective, defineNgModule, definePipe } from './definition';
import { InheritDefinitionFeature } from './features/inherit_definition_feature';
import { NgOnChangesFeature } from './features/ng_onchanges_feature';
import { PublicFeature } from './features/public_feature';
export { ComponentFactory, ComponentFactoryResolver, ComponentRef, WRAP_RENDERER_FACTORY2, injectComponentFactoryResolver } from './component_ref';
export { directiveInject, getFactoryOf, getInheritedFactory, injectAttribute, injectRenderer2 } from './di';
export { NO_CHANGE, bind, interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV, container, containerRefreshStart, containerRefreshEnd, nextContext, element, elementAttribute, elementClassProp, elementEnd, elementProperty, elementStart, elementContainerStart, elementContainerEnd, elementStyling, elementStylingMap, elementStyleProp, elementStylingApply, getCurrentView, restoreView, listener, store, load, loadDirective, namespaceHTML, namespaceMathML, namespaceSVG, enableBindings, disableBindings, projection, projectionDef, text, textBinding, template, reference, embeddedViewStart, embeddedViewEnd, detectChanges, markDirty, tick, } from './instructions';
export { i18nApply, i18nMapping, i18nInterpolation1, i18nInterpolation2, i18nInterpolation3, i18nInterpolation4, i18nInterpolation5, i18nInterpolation6, i18nInterpolation7, i18nInterpolation8, i18nInterpolationV, i18nExpMapping } from './i18n';
export { NgModuleFactory, NgModuleRef } from './ng_module_ref';
export { pipe, pipeBind1, pipeBind2, pipeBind3, pipeBind4, pipeBindV, } from './pipe';
export { QueryList, query, queryRefresh, } from './query';
export { registerContentQuery, loadQueryList, } from './instructions';
export { pureFunction0, pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunction5, pureFunction6, pureFunction7, pureFunction8, pureFunctionV, } from './pure_function';
export { templateRefExtractor, QUERY_READ_ELEMENT_REF, QUERY_READ_CONTAINER_REF, QUERY_READ_FROM_NODE, QUERY_READ_TEMPLATE_REF } from './view_engine_compatibility_prebound';
export { NgOnChangesFeature, InheritDefinitionFeature, PublicFeature, LifecycleHooksFeature, defineComponent, defineDirective, defineNgModule, defineBase, definePipe, getHostElement, getRenderedText, renderComponent, whenRendered, };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFDLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNsSCxPQUFPLEVBQUMsVUFBVSxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN0RyxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSx1Q0FBdUMsQ0FBQztBQUMvRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFHeEQsT0FBTyxFQUFDLGdCQUFnQixFQUFFLHdCQUF3QixFQUFFLFlBQVksRUFBRSxzQkFBc0IsRUFBRSw4QkFBOEIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2pKLE9BQU8sRUFBQyxlQUFlLEVBQUUsWUFBWSxFQUFFLG1CQUFtQixFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFLMUcsT0FBTyxFQUVMLFNBQVMsRUFFVCxJQUFJLEVBQ0osY0FBYyxFQUNkLGNBQWMsRUFDZCxjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsRUFDZCxjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsRUFDZCxjQUFjLEVBRWQsU0FBUyxFQUNULHFCQUFxQixFQUNyQixtQkFBbUIsRUFFbkIsV0FBVyxFQUVYLE9BQU8sRUFDUCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLFVBQVUsRUFDVixlQUFlLEVBQ2YsWUFBWSxFQUVaLHFCQUFxQixFQUNyQixtQkFBbUIsRUFFbkIsY0FBYyxFQUNkLGlCQUFpQixFQUNqQixnQkFBZ0IsRUFDaEIsbUJBQW1CLEVBRW5CLGNBQWMsRUFDZCxXQUFXLEVBRVgsUUFBUSxFQUNSLEtBQUssRUFDTCxJQUFJLEVBQ0osYUFBYSxFQUViLGFBQWEsRUFDYixlQUFlLEVBQ2YsWUFBWSxFQUVaLGNBQWMsRUFDZCxlQUFlLEVBRWYsVUFBVSxFQUNWLGFBQWEsRUFFYixJQUFJLEVBQ0osV0FBVyxFQUNYLFFBQVEsRUFFUixTQUFTLEVBRVQsaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixhQUFhLEVBQ2IsU0FBUyxFQUNULElBQUksR0FDTCxNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE9BQU8sRUFDTCxTQUFTLEVBQ1QsV0FBVyxFQUNYLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGNBQWMsRUFHZixNQUFNLFFBQVEsQ0FBQztBQUVoQixPQUFPLEVBQUMsZUFBZSxFQUFFLFdBQVcsRUFBZSxNQUFNLGlCQUFpQixDQUFDO0FBTTNFLE9BQU8sRUFDTCxJQUFJLEVBQ0osU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsR0FDVixNQUFNLFFBQVEsQ0FBQztBQUVoQixPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxZQUFZLEdBQ2IsTUFBTSxTQUFTLENBQUM7QUFDakIsT0FBUSxFQUNOLG9CQUFvQixFQUNwQixhQUFhLEdBQ2QsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQ0wsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxHQUNkLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUFDLG9CQUFvQixFQUFFLHNCQUFzQixFQUFFLHdCQUF3QixFQUFFLG9CQUFvQixFQUFFLHVCQUF1QixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFLM0ssT0FBTyxFQVVMLGtCQUFrQixFQUNsQix3QkFBd0IsRUFDeEIsYUFBYSxFQUViLHFCQUFxQixFQUNyQixlQUFlLEVBQ2YsZUFBZSxFQUNmLGNBQWMsRUFDZCxVQUFVLEVBQ1YsVUFBVSxFQUNWLGNBQWMsRUFDZCxlQUFlLEVBQ2YsZUFBZSxFQUNmLFlBQVksR0FDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0xpZmVjeWNsZUhvb2tzRmVhdHVyZSwgZ2V0SG9zdEVsZW1lbnQsIGdldFJlbmRlcmVkVGV4dCwgcmVuZGVyQ29tcG9uZW50LCB3aGVuUmVuZGVyZWR9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7ZGVmaW5lQmFzZSwgZGVmaW5lQ29tcG9uZW50LCBkZWZpbmVEaXJlY3RpdmUsIGRlZmluZU5nTW9kdWxlLCBkZWZpbmVQaXBlfSBmcm9tICcuL2RlZmluaXRpb24nO1xuaW1wb3J0IHtJbmhlcml0RGVmaW5pdGlvbkZlYXR1cmV9IGZyb20gJy4vZmVhdHVyZXMvaW5oZXJpdF9kZWZpbml0aW9uX2ZlYXR1cmUnO1xuaW1wb3J0IHtOZ09uQ2hhbmdlc0ZlYXR1cmV9IGZyb20gJy4vZmVhdHVyZXMvbmdfb25jaGFuZ2VzX2ZlYXR1cmUnO1xuaW1wb3J0IHtQdWJsaWNGZWF0dXJlfSBmcm9tICcuL2ZlYXR1cmVzL3B1YmxpY19mZWF0dXJlJztcbmltcG9ydCB7QmFzZURlZiwgQ29tcG9uZW50RGVmLCBDb21wb25lbnREZWZJbnRlcm5hbCwgQ29tcG9uZW50VGVtcGxhdGUsIENvbXBvbmVudFR5cGUsIERpcmVjdGl2ZURlZiwgRGlyZWN0aXZlRGVmRmxhZ3MsIERpcmVjdGl2ZURlZkludGVybmFsLCBEaXJlY3RpdmVUeXBlLCBQaXBlRGVmfSBmcm9tICcuL2ludGVyZmFjZXMvZGVmaW5pdGlvbic7XG5cbmV4cG9ydCB7Q29tcG9uZW50RmFjdG9yeSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDb21wb25lbnRSZWYsIFdSQVBfUkVOREVSRVJfRkFDVE9SWTIsIGluamVjdENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcn0gZnJvbSAnLi9jb21wb25lbnRfcmVmJztcbmV4cG9ydCB7ZGlyZWN0aXZlSW5qZWN0LCBnZXRGYWN0b3J5T2YsIGdldEluaGVyaXRlZEZhY3RvcnksIGluamVjdEF0dHJpYnV0ZSwgaW5qZWN0UmVuZGVyZXIyfSBmcm9tICcuL2RpJztcbmV4cG9ydCB7UmVuZGVyRmxhZ3N9IGZyb20gJy4vaW50ZXJmYWNlcy9kZWZpbml0aW9uJztcbmV4cG9ydCB7Q3NzU2VsZWN0b3JMaXN0fSBmcm9tICcuL2ludGVyZmFjZXMvcHJvamVjdGlvbic7XG5cbi8vIGNsYW5nLWZvcm1hdCBvZmZcbmV4cG9ydCB7XG5cbiAgTk9fQ0hBTkdFLFxuXG4gIGJpbmQsXG4gIGludGVycG9sYXRpb24xLFxuICBpbnRlcnBvbGF0aW9uMixcbiAgaW50ZXJwb2xhdGlvbjMsXG4gIGludGVycG9sYXRpb240LFxuICBpbnRlcnBvbGF0aW9uNSxcbiAgaW50ZXJwb2xhdGlvbjYsXG4gIGludGVycG9sYXRpb243LFxuICBpbnRlcnBvbGF0aW9uOCxcbiAgaW50ZXJwb2xhdGlvblYsXG5cbiAgY29udGFpbmVyLFxuICBjb250YWluZXJSZWZyZXNoU3RhcnQsXG4gIGNvbnRhaW5lclJlZnJlc2hFbmQsXG5cbiAgbmV4dENvbnRleHQsXG5cbiAgZWxlbWVudCxcbiAgZWxlbWVudEF0dHJpYnV0ZSxcbiAgZWxlbWVudENsYXNzUHJvcCxcbiAgZWxlbWVudEVuZCxcbiAgZWxlbWVudFByb3BlcnR5LFxuICBlbGVtZW50U3RhcnQsXG5cbiAgZWxlbWVudENvbnRhaW5lclN0YXJ0LFxuICBlbGVtZW50Q29udGFpbmVyRW5kLFxuXG4gIGVsZW1lbnRTdHlsaW5nLFxuICBlbGVtZW50U3R5bGluZ01hcCxcbiAgZWxlbWVudFN0eWxlUHJvcCxcbiAgZWxlbWVudFN0eWxpbmdBcHBseSxcblxuICBnZXRDdXJyZW50VmlldyxcbiAgcmVzdG9yZVZpZXcsXG5cbiAgbGlzdGVuZXIsXG4gIHN0b3JlLFxuICBsb2FkLFxuICBsb2FkRGlyZWN0aXZlLFxuXG4gIG5hbWVzcGFjZUhUTUwsXG4gIG5hbWVzcGFjZU1hdGhNTCxcbiAgbmFtZXNwYWNlU1ZHLFxuXG4gIGVuYWJsZUJpbmRpbmdzLFxuICBkaXNhYmxlQmluZGluZ3MsXG5cbiAgcHJvamVjdGlvbixcbiAgcHJvamVjdGlvbkRlZixcblxuICB0ZXh0LFxuICB0ZXh0QmluZGluZyxcbiAgdGVtcGxhdGUsXG5cbiAgcmVmZXJlbmNlLFxuXG4gIGVtYmVkZGVkVmlld1N0YXJ0LFxuICBlbWJlZGRlZFZpZXdFbmQsXG4gIGRldGVjdENoYW5nZXMsXG4gIG1hcmtEaXJ0eSxcbiAgdGljayxcbn0gZnJvbSAnLi9pbnN0cnVjdGlvbnMnO1xuXG5leHBvcnQge1xuICBpMThuQXBwbHksXG4gIGkxOG5NYXBwaW5nLFxuICBpMThuSW50ZXJwb2xhdGlvbjEsXG4gIGkxOG5JbnRlcnBvbGF0aW9uMixcbiAgaTE4bkludGVycG9sYXRpb24zLFxuICBpMThuSW50ZXJwb2xhdGlvbjQsXG4gIGkxOG5JbnRlcnBvbGF0aW9uNSxcbiAgaTE4bkludGVycG9sYXRpb242LFxuICBpMThuSW50ZXJwb2xhdGlvbjcsXG4gIGkxOG5JbnRlcnBvbGF0aW9uOCxcbiAgaTE4bkludGVycG9sYXRpb25WLFxuICBpMThuRXhwTWFwcGluZyxcbiAgSTE4bkluc3RydWN0aW9uLFxuICBJMThuRXhwSW5zdHJ1Y3Rpb25cbn0gZnJvbSAnLi9pMThuJztcblxuZXhwb3J0IHtOZ01vZHVsZUZhY3RvcnksIE5nTW9kdWxlUmVmLCBOZ01vZHVsZVR5cGV9IGZyb20gJy4vbmdfbW9kdWxlX3JlZic7XG5cbmV4cG9ydCB7XG4gICAgQXR0cmlidXRlTWFya2VyXG59IGZyb20gJy4vaW50ZXJmYWNlcy9ub2RlJztcblxuZXhwb3J0IHtcbiAgcGlwZSxcbiAgcGlwZUJpbmQxLFxuICBwaXBlQmluZDIsXG4gIHBpcGVCaW5kMyxcbiAgcGlwZUJpbmQ0LFxuICBwaXBlQmluZFYsXG59IGZyb20gJy4vcGlwZSc7XG5cbmV4cG9ydCB7XG4gIFF1ZXJ5TGlzdCxcbiAgcXVlcnksXG4gIHF1ZXJ5UmVmcmVzaCxcbn0gZnJvbSAnLi9xdWVyeSc7XG5leHBvcnQgIHtcbiAgcmVnaXN0ZXJDb250ZW50UXVlcnksXG4gIGxvYWRRdWVyeUxpc3QsXG59IGZyb20gJy4vaW5zdHJ1Y3Rpb25zJztcblxuZXhwb3J0IHtcbiAgcHVyZUZ1bmN0aW9uMCxcbiAgcHVyZUZ1bmN0aW9uMSxcbiAgcHVyZUZ1bmN0aW9uMixcbiAgcHVyZUZ1bmN0aW9uMyxcbiAgcHVyZUZ1bmN0aW9uNCxcbiAgcHVyZUZ1bmN0aW9uNSxcbiAgcHVyZUZ1bmN0aW9uNixcbiAgcHVyZUZ1bmN0aW9uNyxcbiAgcHVyZUZ1bmN0aW9uOCxcbiAgcHVyZUZ1bmN0aW9uVixcbn0gZnJvbSAnLi9wdXJlX2Z1bmN0aW9uJztcblxuZXhwb3J0IHt0ZW1wbGF0ZVJlZkV4dHJhY3RvciwgUVVFUllfUkVBRF9FTEVNRU5UX1JFRiwgUVVFUllfUkVBRF9DT05UQUlORVJfUkVGLCBRVUVSWV9SRUFEX0ZST01fTk9ERSwgUVVFUllfUkVBRF9URU1QTEFURV9SRUZ9IGZyb20gJy4vdmlld19lbmdpbmVfY29tcGF0aWJpbGl0eV9wcmVib3VuZCc7XG5cblxuLy8gY2xhbmctZm9ybWF0IG9uXG5cbmV4cG9ydCB7XG4gIEJhc2VEZWYsXG4gIENvbXBvbmVudERlZixcbiAgQ29tcG9uZW50RGVmSW50ZXJuYWwsXG4gIENvbXBvbmVudFRlbXBsYXRlLFxuICBDb21wb25lbnRUeXBlLFxuICBEaXJlY3RpdmVEZWYsXG4gIERpcmVjdGl2ZURlZkZsYWdzLFxuICBEaXJlY3RpdmVEZWZJbnRlcm5hbCxcbiAgRGlyZWN0aXZlVHlwZSxcbiAgTmdPbkNoYW5nZXNGZWF0dXJlLFxuICBJbmhlcml0RGVmaW5pdGlvbkZlYXR1cmUsXG4gIFB1YmxpY0ZlYXR1cmUsXG4gIFBpcGVEZWYsXG4gIExpZmVjeWNsZUhvb2tzRmVhdHVyZSxcbiAgZGVmaW5lQ29tcG9uZW50LFxuICBkZWZpbmVEaXJlY3RpdmUsXG4gIGRlZmluZU5nTW9kdWxlLFxuICBkZWZpbmVCYXNlLFxuICBkZWZpbmVQaXBlLFxuICBnZXRIb3N0RWxlbWVudCxcbiAgZ2V0UmVuZGVyZWRUZXh0LFxuICByZW5kZXJDb21wb25lbnQsXG4gIHdoZW5SZW5kZXJlZCxcbn07XG4iXX0=