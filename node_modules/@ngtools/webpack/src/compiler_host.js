"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const ts = require("typescript");
const dev = Math.floor(Math.random() * 10000);
class WebpackCompilerHost {
    constructor(_options, basePath, host) {
        this._options = _options;
        this._changedFiles = new Set();
        this._syncHost = new core_1.virtualFs.SyncDelegateHost(new core_1.virtualFs.CordHost(host));
        this._basePath = core_1.normalize(basePath);
    }
    get virtualFiles() {
        return this._syncHost.delegate
            .records()
            .filter(record => record.kind === 'create')
            .map((record) => record.path);
    }
    denormalizePath(path) {
        return core_1.getSystemPath(core_1.normalize(path));
    }
    resolve(path) {
        const p = core_1.normalize(path);
        if (core_1.isAbsolute(p)) {
            return p;
        }
        else {
            return core_1.join(this._basePath, p);
        }
    }
    resetChangedFileTracker() {
        this._changedFiles.clear();
    }
    getChangedFilePaths() {
        return [...this._changedFiles];
    }
    getNgFactoryPaths() {
        return this.virtualFiles
            .filter(fileName => fileName.endsWith('.ngfactory.js') || fileName.endsWith('.ngstyle.js'))
            // These paths are used by the virtual file system decorator so we must denormalize them.
            .map(path => this.denormalizePath(path));
    }
    invalidate(fileName) {
        const fullPath = this.resolve(fileName);
        if (this.fileExists(fileName)) {
            this._changedFiles.add(fullPath);
        }
    }
    fileExists(fileName, delegate = true) {
        const p = this.resolve(fileName);
        const exists = this._syncHost.exists(p) && this._syncHost.isFile(p);
        if (delegate) {
            return exists;
        }
        else {
            const backend = new core_1.virtualFs.SyncDelegateHost(this._syncHost.delegate.backend);
            return exists && !(backend.exists(p) && backend.isFile(p));
        }
    }
    readFile(fileName) {
        const filePath = this.resolve(fileName);
        if (!this._syncHost.exists(filePath) || !this._syncHost.isFile(filePath)) {
            return undefined;
        }
        return core_1.virtualFs.fileBufferToString(this._syncHost.read(filePath));
    }
    readFileBuffer(fileName) {
        const filePath = this.resolve(fileName);
        if (!this._syncHost.exists(filePath) || !this._syncHost.isFile(filePath)) {
            return undefined;
        }
        return Buffer.from(this._syncHost.read(filePath));
    }
    stat(path) {
        const p = this.resolve(path);
        const stats = this._syncHost.exists(p) && this._syncHost.stat(p);
        if (!stats) {
            return null;
        }
        return Object.assign({ isBlockDevice: () => false, isCharacterDevice: () => false, isFIFO: () => false, isSymbolicLink: () => false, isSocket: () => false, dev, ino: Math.floor(Math.random() * 100000), mode: parseInt('777', 8), nlink: 1, uid: 0, gid: 0, rdev: 0, blksize: 512, blocks: Math.ceil(stats.size / 512), atimeMs: stats.atime.getTime(), mtimeMs: stats.mtime.getTime(), ctimeMs: stats.ctime.getTime(), birthtimeMs: stats.birthtime.getTime() }, stats);
    }
    directoryExists(directoryName) {
        const p = this.resolve(directoryName);
        return this._syncHost.exists(p) && this._syncHost.isDirectory(p);
    }
    getDirectories(path) {
        const p = this.resolve(path);
        let delegated;
        try {
            delegated = this._syncHost.list(p).filter(x => {
                try {
                    return this._syncHost.isDirectory(core_1.join(p, x));
                }
                catch (_a) {
                    return false;
                }
            });
        }
        catch (_a) {
            delegated = [];
        }
        return delegated;
    }
    getSourceFile(fileName, languageVersion, onError) {
        try {
            const content = this.readFile(fileName);
            if (content != undefined) {
                return ts.createSourceFile(workaroundResolve(fileName), content, languageVersion, true);
            }
        }
        catch (e) {
            if (onError) {
                onError(e.message);
            }
        }
        return undefined;
    }
    getDefaultLibFileName(options) {
        return ts.createCompilerHost(options).getDefaultLibFileName(options);
    }
    // This is due to typescript CompilerHost interface being weird on writeFile. This shuts down
    // typings in WebStorm.
    get writeFile() {
        return (fileName, data, _writeByteOrderMark, onError, _sourceFiles) => {
            const p = this.resolve(fileName);
            try {
                this._syncHost.write(p, core_1.virtualFs.stringToFileBuffer(data));
            }
            catch (e) {
                if (onError) {
                    onError(e.message);
                }
            }
        };
    }
    getCurrentDirectory() {
        return this._basePath;
    }
    getCanonicalFileName(fileName) {
        const path = this.resolve(fileName);
        return this.useCaseSensitiveFileNames ? path : path.toLowerCase();
    }
    useCaseSensitiveFileNames() {
        return !process.platform.startsWith('win32');
    }
    getNewLine() {
        return '\n';
    }
    setResourceLoader(resourceLoader) {
        this._resourceLoader = resourceLoader;
    }
    readResource(fileName) {
        if (this._resourceLoader) {
            // These paths are meant to be used by the loader so we must denormalize them.
            const denormalizedFileName = this.denormalizePath(core_1.normalize(fileName));
            return this._resourceLoader.get(denormalizedFileName);
        }
        else {
            return this.readFile(fileName);
        }
    }
    trace(message) {
        console.log(message);
    }
}
exports.WebpackCompilerHost = WebpackCompilerHost;
// `TsCompilerAotCompilerTypeCheckHostAdapter` in @angular/compiler-cli seems to resolve module
// names directly via `resolveModuleName`, which prevents full Path usage.
// To work around this we must provide the same path format as TS internally uses in
// the SourceFile paths.
function workaroundResolve(path) {
    return core_1.getSystemPath(core_1.normalize(path)).replace(/\\/g, '/');
}
exports.workaroundResolve = workaroundResolve;
//# sourceMappingURL=data:application/json;base64,